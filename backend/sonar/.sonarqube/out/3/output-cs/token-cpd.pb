Å
5D:\git\Achei\backend\Persistencia\ConnectionString.cs
	namespace 	
Persistencia
 
{ 
public 

static 
class 
ConnectionString (
{ 
public 
static 
string 
Server #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
static 
string 
Database %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
static 
string 
UserId #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
static 
string 
Password %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
static 
void 
SetConnection (
(( )
string) /
server0 6
,6 7
string8 >
database? G
,G H
stringI O
userIdP V
,V W
stringX ^
password_ g
)g h
{ 	
ConnectionString 
. 
Server #
=$ %
server& ,
;, -
ConnectionString 
. 
Database %
=& '
database( 0
;0 1
ConnectionString 
. 
UserId #
=$ %
userId& ,
;, -
ConnectionString 
. 
Password %
=& '
password( 0
;0 1
} 	
public 
static 
string 
GetConnection *
(* +
)+ ,
{ 	
return 
$str 
+ 
Server %
+& '
$str( 4
+5 6
Database7 ?
+ 
$str 
+ 
UserId  &
+' (
$str) 5
+6 7
Password8 @
+A B
$strC F
;F G
} 	
} 
} æ
ND:\git\Achei\backend\Persistencia\Contexts\Application\ApplicationDbContext.cs
	namespace 	
Persistencia
 
. 
Contexts 
.  
Application  +
{ 
public 

partial 
class  
ApplicationDbContext -
:. /
	DbContext0 9
{ 
public		  
ApplicationDbContext		 #
(		# $
DbContextOptions		$ 4
<		4 5 
ApplicationDbContext		5 I
>		I J
options		K R
)		R S
:		T U
base		V Z
(		Z [
options		[ b
)		b c
{		d e
}		f g
	protected 
override 
void 
OnConfiguring  -
(- .#
DbContextOptionsBuilder. E
optionsBuilderF T
)T U
{ 	
optionsBuilder 
. &
EnableSensitiveDataLogging 5
(5 6
)6 7
;7 8
optionsBuilder 
. 
UseSqlServer 
( 
ConnectionString .
.. /
GetConnection/ <
(< =
)= >
,> ?
b@ A
=>B D
bE F
.F G
MigrationsAssemblyG Y
(Y Z
$strZ f
)f g
)g h
.  
EnableDetailedErrors %
(% &
)& '
;' (
} 	
	protected 
override 
void 
OnModelCreating  /
(/ 0
ModelBuilder0 <
modelBuilder= I
)I J
{ 	
modelBuilder 
. 
HasAnnotation &
(& '
$str' 7
,7 8
$str9 @
)@ A
;A B
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
UsuarioConfig0 =
(= >
)> ?
)? @
;@ A
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /

ItemConfig0 :
(: ;
); <
)< =
;= >
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
	TagConfig0 9
(9 :
): ;
); <
;< =
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
RegiaoConfig0 <
(< =
)= >
)> ?
;? @
modelBuilder 
. 
Entity 
<  
ItemPerdido  +
>+ ,
(, -
)- .
. 
Property 
( 
e 
=> 
e  
.  !
	UsuarioId! *
)* +
. 
HasColumnName 
( 
$str *
)* +
;+ ,
modelBuilder   
.   
Entity   
<    

ItemAchado    *
>  * +
(  + ,
)  , -
.!! 
Property!! 
(!! 
e!! 
=>!! 
e!!  
.!!  !
	UsuarioId!!! *
)!!* +
."" 
HasColumnName"" 
("" 
$str"" *
)""* +
;""+ ,
}## 	
}$$ 
}%% Ù
WD:\git\Achei\backend\Persistencia\Contexts\Application\ApplicationDbContext.DataSets.cs
	namespace 	
Persistencia
 
. 
Contexts 
.  
Application  +
{ 
public 

partial 
class  
ApplicationDbContext -
{ 
public		 
virtual		 
DbSet		 
<		 
Usuario		 $
>		$ %
Usuario		& -
{		. /
get		0 3
;		3 4
set		5 8
;		8 9
}		: ;
public

 
virtual

 
DbSet

 
<

 

ItemAchado

 '
>

' (

ItemAchado

) 3
{

4 5
get

6 9
;

9 :
set

; >
;

> ?
}

@ A
public 
virtual 
DbSet 
< 
ItemPerdido (
>( )
ItemPerdido* 5
{6 7
get8 ;
;; <
set= @
;@ A
}B C
public 
virtual 
DbSet 
< 
Tag  
>  !
Tag" %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
virtual 
DbSet 
< 
Regiao #
># $
Regiao% +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
} 
} »
DD:\git\Achei\backend\Persistencia\Interfaces\IAutenticacaoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface  
IAutenticacaoService )
:* +
ICrudService, 8
<8 9
Usuario9 @
>@ A
{ 
Usuario 
AutenticarUsuario !
(! "
string" (
email) .
,. /
string0 6
senha7 <
)< =
;= >
} 
}		 ù
<D:\git\Achei\backend\Persistencia\Interfaces\ICrudService.cs
	namespace

 	
Persistencia


 
.

 

Interfaces

 !
{ 
public 

	interface 
ICrudService !
<! "
T" #
># $
:% &
IDisposable' 2
where3 8
T9 :
:; <
class= B
,B C
IEntityD K
,K L
newM P
(P Q
)Q R
{ 

IQueryable 
< 
T 
> 
FromSql 
( 
string $
sql% (
)( )
;) *

IQueryable)) 
<)) 
T)) 
>)) 
FromSql)) 
()) 
string)) $
sql))% (
,))( )
params))* 0
object))1 7
[))7 8
]))8 9
obj)): =
)))= >
;))> ?
void// 
	Atualizar// 
(// 
T// 
entidade// !
)//! "
;//" #
void55 
	Atualizar55 
(55 
List55 
<55 
T55 
>55 
	entidades55 (
)55( )
;55) *
Task<< 
AtualizarAsync<< 
(<< 
T<< 
entidade<< &
)<<& '
;<<' (
TaskBB 
AtualizarAsyncBB 
(BB 
ListBB  
<BB  !
TBB! "
>BB" #
	entidadesBB$ -
)BB- .
;BB. /
ListHH 
<HH 
THH 
>HH 
BuscarHH 
(HH 
)HH 
;HH 
TOO 	
BuscarOO
 
(OO 
longOO 
idOO 
)OO 
;OO 

IQueryabledd 
<dd 
Tdd 
>dd 
Buscardd 
(dd 

Expressiondd '
<dd' (
Funcdd( ,
<dd, -
Tdd- .
,dd. /
booldd0 4
>dd4 5
>dd5 6
	predicatedd7 @
,dd@ A
FuncddB F
<ddF G

IQueryableddG Q
<ddQ R
TddR S
>ddS T
,ddT U 
IIncludableQueryableddV j
<ddj k
Tddk l
,ddl m
objectddn t
>ddt u
>ddu v
includeddw ~
=	dd 
null
dd 
)
dd 
;
dd 
Taskjj 
<jj 
Listjj 
<jj 
Tjj 
>jj 
>jj 
BuscarAsyncjj !
(jj! "
)jj" #
;jj# $
Taskqq 
<qq 
Tqq 
>qq 
BuscarAsyncqq 
(qq 
longqq  
idqq! #
)qq# $
;qq$ %
voidxx 
Deletarxx 
(xx 
Txx 
entidadexx 
)xx  
;xx  !
void 
Deletar 
( 
List 
< 
T 
> 
	entidades &
)& '
;' (
void
 
Deletar
 
(
 
long
 
id
 
)
 
;
 
Task
 
DeletarAsync
 
(
 
T
 
entidade
 $
)
$ %
;
% &
Task
 
DeletarAsync
 
(
 
long
 
id
 !
)
! "
;
" #
T
 	
Inserir

 
(
 
T
 
entidade
 
)
 
;
 
Task
££ 
<
££ 
T
££ 
>
££ 
InserirAsync
££ 
(
££ 
T
££ 
entidade
££ '
)
££' (
;
££( )
DbSet
©© 
<
©© 
T
©© 
>
©© 
Entity
©© 
(
©© 
)
©© 
;
©© 
}
ªª 
}«« ³
BD:\git\Achei\backend\Persistencia\Interfaces\IITemAchadoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IItemAchadoService '
:( )
ICrudService* 6
<6 7

ItemAchado7 A
>A B
{ 
List 
< 

ItemAchado 
> 
BuscarPorIdUsuario +
(+ ,
long, 0
id1 3
)3 4
;4 5
} 
} Å
CD:\git\Achei\backend\Persistencia\Interfaces\IItemPerdidoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IItemPerdidoService (
:) *
ICrudService+ 7
<7 8
ItemPerdido8 C
>C D
{ 
List 
< 
ItemPerdido 
> 
BuscarPorIdUsuario ,
(, -
long- 1
id2 4
)4 5
;5 6
ItemPerdido 
BuscarComTags !
(! "
long" &
id' )
)) *
;* +
ItemPerdido !
BuscarComEagerLoading )
() *
long* .
id/ 1
)1 2
;2 3
} 
} ð
>D:\git\Achei\backend\Persistencia\Interfaces\IRegiaoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IRegiaoService #
:$ %
ICrudService& 2
<2 3
Regiao3 9
>9 :
{ 
Regiao 
BuscarPorItemId 
( 
long #
id$ &
)& '
;' (
} 
}		 
;D:\git\Achei\backend\Persistencia\Interfaces\ITagService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
ITagService  
:! "
ICrudService# /
</ 0
Tag0 3
>3 4
{ 
List 
< 
Tag 
> 
BuscarPorItemId !
(! "
long" &
id' )
)) *
;* +
}		 
}

 ó
?D:\git\Achei\backend\Persistencia\Interfaces\IUsuarioService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IUsuarioService $
:% &
ICrudService' 3
<3 4
Usuario4 ;
>; <
{ 
} 
}		 ¿	
AD:\git\Achei\backend\Persistencia\Services\AutenticacaoService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
AutenticacaoService $
:% &
CrudService' 2
<2 3
Usuario3 :
>: ;
,; < 
IAutenticacaoService= Q
{		 
public

 
AutenticacaoService

 "
(

" # 
ApplicationDbContext

# 7
context

8 ?
)

? @
:

A B
base

C G
(

G H
context

H O
)

O P
{

Q R
}

S T
public 
Usuario 
AutenticarUsuario (
(( )
string) /
email0 5
,5 6
string7 =
senha> C
)C D
{ 	
return 
base 
. 
Buscar 
( 
usuario &
=>' )
usuario* 1
.1 2
Email2 7
==8 :
email; @
)@ A
.A B
SingleOrDefaultB Q
(Q R
)R S
;S T
} 	
} 
} Ã
9D:\git\Achei\backend\Persistencia\Services\CrudService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
CrudService 
< 
T 
> 
:  !
ICrudService" .
<. /
T/ 0
>0 1
where2 7
T8 9
:: ;
class< A
,A B
IEntityC J
,J K
newL O
(O P
)P Q
{ 
private 
readonly 
	DbContext "
	dbService# ,
;, -
public 
CrudService 
( 
	DbContext $
	dbService% .
). /
{ 	
this 
. 
	dbService 
= 
	dbService &
;& '
} 	
public 
void 
Dispose 
( 
) 
{ 	
Dispose 
( 
true 
) 
; 
GC 
. 
SuppressFinalize 
(  
this  $
)$ %
;% &
} 	
	protected 
virtual 
void 
Dispose &
(& '
bool' +
	disposing, 5
)5 6
{ 	
	dbService   
.   
Dispose   
(   
)   
;    
}!! 	
public## 

IQueryable## 
<## 
T## 
>## 
FromSql## $
(##$ %
string##% +
sql##, /
)##/ 0
{$$ 	
return%% 
	dbService%% 
.%% 
Set%%  
<%%  !
T%%! "
>%%" #
(%%# $
)%%$ %
.%%% &
FromSql%%& -
(%%- .
sql%%. 1
)%%1 2
;%%2 3
}&& 	
public(( 

IQueryable(( 
<(( 
T(( 
>(( 
FromSql(( $
((($ %
string((% +
sql((, /
,((/ 0
params((1 7
object((8 >
[((> ?
]((? @
obj((A D
)((D E
{)) 	
return** 
	dbService** 
.** 
Set**  
<**  !
T**! "
>**" #
(**# $
)**$ %
.**% &
FromSql**& -
(**- .
sql**. 1
,**1 2
obj**3 6
)**6 7
;**7 8
}++ 	
public-- 
void-- 
	Atualizar-- 
(-- 
T-- 
entidade--  (
)--( )
{.. 	
if// 
(// 
	dbService// 
.// 
Set// 
<// 
T// 
>//  
(//  !
)//! "
.//" #
Any//# &
(//& '
ent//' *
=>//+ -
ent//. 1
.//1 2
Id//2 4
==//5 7
entidade//8 @
.//@ A
Id//A C
)//C D
)//D E
{00 
	dbService11 
.11 
Update11  
(11  !
entidade11! )
)11) *
;11* +
	dbService22 
.22 
SaveChanges22 %
(22% &
)22& '
;22' (
}33 
else44 
{55 
throw66 
new66 #
EntityNotFoundException66 1
(661 2
$str662 m
)66m n
;66n o
}77 
}88 	
public:: 
void:: 
	Atualizar:: 
(:: 
List:: "
<::" #
T::# $
>::$ %
	entidades::& /
)::/ 0
{;; 	
if<< 
(<< 
	entidades<< 
==<< 
null<< !
)<<! "
{== 
throw>> 
new>> !
ArgumentNullException>> /
(>>/ 0
$str>>0 ;
,>>; <
$str>>= c
)>>c d
;>>d e
}?? 
forAA 
(AA 
intAA 
iAA 
=AA 
$numAA 
;AA 
iAA 
<AA 
	entidadesAA  )
.AA) *
CountAA* /
;AA/ 0
iAA1 2
++AA2 4
)AA4 5
{BB 
ifCC 
(CC 
	dbServiceCC 
.CC 
SetCC !
<CC! "
TCC" #
>CC# $
(CC$ %
)CC% &
.CC& '
AnyCC' *
(CC* +
entCC+ .
=>CC/ 1
entCC2 5
.CC5 6
IdCC6 8
==CC9 ;
	entidadesCC< E
[CCE F
iCCF G
]CCG H
.CCH I
IdCCI K
)CCK L
)CCL M
{DD 
	dbServiceEE 
.EE 
UpdateEE $
(EE$ %
	entidadesEE% .
[EE. /
iEE/ 0
]EE0 1
)EE1 2
;EE2 3
}FF 
elseGG 
{HH 
throwII 
newII #
EntityNotFoundExceptionII 5
(II5 6
$"II6 8 
Entidade no index: 'II8 L
{IIL M
iIIM N
}IIN O
' nÃ£o encontradaIIO _
"II_ `
)II` a
;IIa b
}JJ 
}KK 
	dbServiceLL 
.LL 
SaveChangesLL !
(LL! "
)LL" #
;LL# $
}MM 	
publicOO 
ListOO 
<OO 
TOO 
>OO 
BuscarOO 
(OO 
)OO 
{PP 	
returnQQ 
	dbServiceQQ 
.QQ 
SetQQ  
<QQ  !
TQQ! "
>QQ" #
(QQ# $
)QQ$ %
.QQ% &
ToListQQ& ,
(QQ, -
)QQ- .
;QQ. /
}RR 	
publicTT 

IQueryableTT 
<TT 
TTT 
>TT 
BuscarTT #
(TT# $

ExpressionTT$ .
<TT. /
FuncTT/ 3
<TT3 4
TTT4 5
,TT5 6
boolTT7 ;
>TT; <
>TT< =
	predicateTT> G
,TTG H
FuncTTI M
<TTM N

IQueryableTTN X
<TTX Y
TTTY Z
>TTZ [
,TT[ \ 
IIncludableQueryableUU  
<UU  !
TUU! "
,UU" #
objectUU$ *
>UU* +
>UU+ ,
includeUU- 4
=UU5 6
nullUU7 ;
)UU; <
{VV 	

IQueryableWW 
<WW 
TWW 
>WW 
resultWW  
=WW! "
	dbServiceWW# ,
.WW, -
SetWW- 0
<WW0 1
TWW1 2
>WW2 3
(WW3 4
)WW4 5
.WW5 6
WhereWW6 ;
(WW; <
	predicateWW< E
)WWE F
;WWF G
ifYY 
(YY 
includeYY 
!=YY 
nullYY 
)YY  
{ZZ 
result[[ 
=[[ 
include[[  
([[  !
result[[! '
)[[' (
;[[( )
}\\ 
return^^ 
result^^ 
.^^ 
AsQueryable^^ %
(^^% &
)^^& '
;^^' (
}__ 	
publicaa 
Taa 
Buscaraa 
(aa 
longaa 
idaa 
)aa  
{bb 	
returncc 
	dbServicecc 
.cc 
Setcc  
<cc  !
Tcc! "
>cc" #
(cc# $
)cc$ %
.cc% &
Findcc& *
(cc* +
idcc+ -
)cc- .
;cc. /
}dd 	
publicff 
voidff 
Deletarff 
(ff 
Tff 
entidadeff &
)ff& '
{gg 	
ifhh 
(hh 
entidadehh 
==hh 
nullhh  
)hh  !
{ii 
throwjj 
newjj !
ArgumentNullExceptionjj /
(jj/ 0
$strjj0 :
,jj: ;
$strjj< g
)jjg h
;jjh i
}kk 
	dbServicemm 
.mm 
Setmm 
<mm 
Tmm 
>mm 
(mm 
)mm 
.mm 
Removemm %
(mm% &
entidademm& .
)mm. /
;mm/ 0
	dbServicenn 
.nn 
SaveChangesnn !
(nn! "
)nn" #
;nn# $
}oo 	
publicqq 
voidqq 
Deletarqq 
(qq 
Listqq  
<qq  !
Tqq! "
>qq" #
	entidadesqq$ -
)qq- .
{rr 	
ifss 
(ss 
	entidadesss 
==ss 
nullss !
)ss! "
{tt 
throwuu 
newuu !
ArgumentNullExceptionuu /
(uu/ 0
$struu0 ;
,uu; <
$struu= h
)uuh i
;uui j
}vv 
forxx 
(xx 
intxx 
ixx 
=xx 
$numxx 
;xx 
ixx 
<xx 
	entidadesxx  )
.xx) *
Countxx* /
;xx/ 0
ixx1 2
++xx2 4
)xx4 5
{yy 
ifzz 
(zz 
	entidadeszz 
[zz 
izz 
]zz  
!=zz! #
nullzz$ (
)zz( )
{{{ 
	dbService|| 
.|| 
Set|| !
<||! "
T||" #
>||# $
(||$ %
)||% &
.||& '
Remove||' -
(||- .
	entidades||. 7
[||7 8
i||8 9
]||9 :
)||: ;
;||; <
}}} 
else~~ 
{ 
throw
 
new
 $
NullReferenceException
 4
(
4 5
$str
5 l
+
m n
i
o p
)
p q
;
q r
}
 
}
 
	dbService
 
.
 
SaveChanges
 !
(
! "
)
" #
;
# $
}
 	
public
 
void
 
Deletar
 
(
 
long
  
id
! #
)
# $
{
 	
IEntity
 
obj
 
=
 
new
 
T
 
(
  
)
  !
{
" #
Id
$ &
=
' (
id
) +
}
, -
;
- .
	dbService
 
.
 
Attach
 
(
 
obj
  
)
  !
;
! "
	dbService
 
.
 
Remove
 
(
 
obj
  
)
  !
;
! "
	dbService
 
.
 
SaveChanges
 !
(
! "
)
" #
;
# $
}
 	
public
 
T
 
Inserir
 
(
 
T
 
entidade
 #
)
# $
{
 	
if
 
(
 
entidade
 
==
 
null
  
)
  !
{
 
throw
 
new
 #
ArgumentNullException
 /
(
/ 0
$str
0 :
,
: ;
$str
< f
)
f g
;
g h
}
 
bool
 
exists
 
=
 
	dbService
 #
.
# $
Set
$ '
<
' (
T
( )
>
) *
(
* +
)
+ ,
.
, -
Any
- 0
(
0 1
ent
1 4
=>
5 7
ent
8 ;
.
; <
Id
< >
==
? A
entidade
B J
.
J K
Id
K M
)
M N
;
N O
if
 
(
 
!
 
exists
 
)
 
{
 
	dbService
 
.
 
Add
 
(
 
entidade
 &
)
& '
;
' (
	dbService
 
.
 
SaveChanges
 %
(
% &
)
& '
;
' (
return
 
entidade
 
;
  
}
 
else
 
{
   
throw
¡¡ 
new
¡¡ *
EntityAlreadyExistsException
¡¡ 6
(
¡¡6 7
$str
¡¡7 i
)
¡¡i j
;
¡¡j k
}
¢¢ 
}
££ 	
private
¥¥ 
void
¥¥ "
ValidarEntidadeNulla
¥¥ )
(
¥¥) *
T
¥¥* +
entidade
¥¥, 4
)
¥¥4 5
{
¦¦ 	
if
§§ 
(
§§ 
entidade
§§ 
==
§§ 
null
§§  
)
§§  !
{
¨¨ 
throw
©© 
new
©© #
ArgumentNullException
©© /
(
©©/ 0
$str
©©0 :
,
©©: ;
$str
©©< h
)
©©h i
;
©©i j
}
ªª 
}
«« 	
public
­­ 
async
­­ 
Task
­­ 
AtualizarAsync
­­ (
(
­­( )
T
­­) *
entidade
­­+ 3
)
­­3 4
{
®® 	"
ValidarEntidadeNulla
¯¯  
(
¯¯  !
entidade
¯¯! )
)
¯¯) *
;
¯¯* +
if
±± 
(
±± 
	dbService
±± 
.
±± 
Set
±± 
<
±± 
T
±± 
>
±±  
(
±±  !
)
±±! "
.
±±" #
Any
±±# &
(
±±& '
ent
±±' *
=>
±±+ -
ent
±±. 1
.
±±1 2
Id
±±2 4
==
±±5 7
entidade
±±8 @
.
±±@ A
Id
±±A C
)
±±C D
)
±±D E
{
²² 
	dbService
³³ 
.
³³ 
Update
³³  
(
³³  !
entidade
³³! )
)
³³) *
;
³³* +
await
´´ 
	dbService
´´ 
.
´´  
SaveChangesAsync
´´  0
(
´´0 1
)
´´1 2
;
´´2 3
}
µµ 
else
¶¶ 
{
·· 
throw
¸¸ 
new
¸¸ %
EntityNotFoundException
¸¸ 1
(
¸¸1 2
$str
¸¸2 m
)
¸¸m n
;
¸¸n o
}
¹¹ 
}
ºº 	
public
¼¼ 
async
¼¼ 
Task
¼¼ 
AtualizarAsync
¼¼ (
(
¼¼( )
List
¼¼) -
<
¼¼- .
T
¼¼. /
>
¼¼/ 0
	entidades
¼¼1 :
)
¼¼: ;
{
½½ 	
	dbService
¾¾ 
.
¾¾ 
Update
¾¾ 
(
¾¾ 
	entidades
¾¾ &
)
¾¾& '
;
¾¾' (
await
¿¿ 
	dbService
¿¿ 
.
¿¿ 
SaveChangesAsync
¿¿ ,
(
¿¿, -
)
¿¿- .
;
¿¿. /
}
ÀÀ 	
public
ÂÂ 
async
ÂÂ 
Task
ÂÂ 
<
ÂÂ 
List
ÂÂ 
<
ÂÂ 
T
ÂÂ  
>
ÂÂ  !
>
ÂÂ! "
BuscarAsync
ÂÂ# .
(
ÂÂ. /
)
ÂÂ/ 0
{
ÃÃ 	
return
ÄÄ 
await
ÄÄ 
	dbService
ÄÄ "
.
ÄÄ" #
Set
ÄÄ# &
<
ÄÄ& '
T
ÄÄ' (
>
ÄÄ( )
(
ÄÄ) *
)
ÄÄ* +
.
ÄÄ+ ,
ToListAsync
ÄÄ, 7
(
ÄÄ7 8
)
ÄÄ8 9
;
ÄÄ9 :
}
ÅÅ 	
public
ÇÇ 
async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
T
ÇÇ 
>
ÇÇ 
BuscarAsync
ÇÇ (
(
ÇÇ( )
long
ÇÇ) -
id
ÇÇ. 0
)
ÇÇ0 1
{
ÈÈ 	
return
ÉÉ 
await
ÉÉ 
	dbService
ÉÉ "
.
ÉÉ" #
	FindAsync
ÉÉ# ,
<
ÉÉ, -
T
ÉÉ- .
>
ÉÉ. /
(
ÉÉ/ 0
id
ÉÉ0 2
)
ÉÉ2 3
;
ÉÉ3 4
}
ÊÊ 	
public
ÌÌ 
async
ÌÌ 
Task
ÌÌ 
DeletarAsync
ÌÌ &
(
ÌÌ& '
T
ÌÌ' (
entidade
ÌÌ) 1
)
ÌÌ1 2
{
ÍÍ 	
	dbService
ÎÎ 
.
ÎÎ 
Remove
ÎÎ 
(
ÎÎ 
entidade
ÎÎ %
)
ÎÎ% &
;
ÎÎ& '
await
ÏÏ 
	dbService
ÏÏ 
.
ÏÏ 
SaveChangesAsync
ÏÏ ,
(
ÏÏ, -
)
ÏÏ- .
;
ÏÏ. /
}
ÐÐ 	
public
ÒÒ 
async
ÒÒ 
Task
ÒÒ 
DeletarAsync
ÒÒ &
(
ÒÒ& '
long
ÒÒ' +
id
ÒÒ, .
)
ÒÒ. /
{
ÓÓ 	
IEntity
ÔÔ 
obj
ÔÔ 
=
ÔÔ 
new
ÔÔ 
T
ÔÔ 
(
ÔÔ  
)
ÔÔ  !
{
ÔÔ" #
Id
ÔÔ$ &
=
ÔÔ' (
id
ÔÔ) +
}
ÔÔ, -
;
ÔÔ- .
	dbService
ÖÖ 
.
ÖÖ 
Attach
ÖÖ 
(
ÖÖ 
obj
ÖÖ  
)
ÖÖ  !
;
ÖÖ! "
	dbService
×× 
.
×× 
Remove
×× 
(
×× 
obj
××  
)
××  !
;
××! "
await
ØØ 
	dbService
ØØ 
.
ØØ 
SaveChangesAsync
ØØ ,
(
ØØ, -
)
ØØ- .
;
ØØ. /
}
ÙÙ 	
public
ÛÛ 
async
ÛÛ 
Task
ÛÛ 
<
ÛÛ 
T
ÛÛ 
>
ÛÛ 
InserirAsync
ÛÛ )
(
ÛÛ) *
T
ÛÛ* +
entidade
ÛÛ, 4
)
ÛÛ4 5
{
ÜÜ 	
try
ÝÝ 
{
ÞÞ 
bool
ßß 
exists
ßß 
=
ßß 
	dbService
ßß '
.
ßß' (
Set
ßß( +
<
ßß+ ,
T
ßß, -
>
ßß- .
(
ßß. /
)
ßß/ 0
.
ßß0 1
Any
ßß1 4
(
ßß4 5
ent
ßß5 8
=>
ßß9 ;
ent
ßß< ?
.
ßß? @
Id
ßß@ B
==
ßßC E
entidade
ßßF N
.
ßßN O
Id
ßßO Q
)
ßßQ R
;
ßßR S
if
áá 
(
áá 
!
áá 
exists
áá 
)
áá 
{
ââ 
await
ãã 
	dbService
ãã #
.
ãã# $
AddAsync
ãã$ ,
(
ãã, -
entidade
ãã- 5
)
ãã5 6
;
ãã6 7
await
ää 
	dbService
ää #
.
ää# $
SaveChangesAsync
ää$ 4
(
ää4 5
)
ää5 6
;
ää6 7
return
åå 
entidade
åå #
;
åå# $
}
ææ 
else
çç 
{
èè 
System
éé 
.
éé 
Diagnostics
éé &
.
éé& '
Debug
éé' ,
.
éé, -
	WriteLine
éé- 6
(
éé6 7
entidade
éé7 ?
.
éé? @
GetType
éé@ G
(
ééG H
)
ééH I
+
ééJ K
$str
ééL T
+
ééU V
entidade
ééW _
.
éé_ `
Id
éé` b
+
ééc d
$str
éée x
)
ééx y
;
ééy z
throw
êê 
new
êê *
EntityAlreadyExistsException
êê :
(
êê: ;
$str
êê; W
)
êêW X
;
êêX Y
}
ëë 
}
ìì 
catch
íí 
(
íí 
	Exception
íí 
e
íí 
)
íí 
{
îî 
System
ïï 
.
ïï 
Diagnostics
ïï "
.
ïï" #
Debug
ïï# (
.
ïï( )
	WriteLine
ïï) 2
(
ïï2 3
e
ïï3 4
.
ïï4 5
Message
ïï5 <
)
ïï< =
;
ïï= >
throw
ðð 
new
ðð *
EntityAlreadyExistsException
ðð 6
(
ðð6 7
$str
ðð7 g
)
ððg h
;
ððh i
}
ññ 
}
òò 	
public
ôô 
DbSet
ôô 
<
ôô 
T
ôô 
>
ôô 
Entity
ôô 
(
ôô 
)
ôô  
{
õõ 	
return
öö 
	dbService
öö 
.
öö 
Set
öö  
<
öö  !
T
öö! "
>
öö" #
(
öö# $
)
öö$ %
;
öö% &
}
÷÷ 	
}
øø 
}ùù ¯	
?D:\git\Achei\backend\Persistencia\Services\ItemAchadoService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public		 

class		 
ItemAchadoService		 "
:		# $
CrudService		% 0
<		0 1

ItemAchado		1 ;
>		; <
,		< =
IItemAchadoService		> P
{

 
public 
ItemAchadoService  
(  ! 
ApplicationDbContext! 5
	dbContext6 ?
)? @
:A B
baseC G
(G H
	dbContextH Q
)Q R
{S T
}U V
public 
List 
< 

ItemAchado 
> 
BuscarPorIdUsuario  2
(2 3
long3 7
id8 :
): ;
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
	UsuarioId2 ;
==< >
id? A
)A B
.B C
ToListC I
(I J
)J K
;K L
} 	
} 
} 
@D:\git\Achei\backend\Persistencia\Services\ItemPerdidoService.cs
	namespace 	
Persistencia
 
. 
Services 
{		 
public

 

class

 
ItemPerdidoService

 #
:

$ %
CrudService

& 1
<

1 2
ItemPerdido

2 =
>

= >
,

> ?
IItemPerdidoService

@ S
{ 
public 
ItemPerdidoService !
(! " 
ApplicationDbContext" 6
	dbContext7 @
)@ A
:B C
baseD H
(H I
	dbContextI R
)R S
{T U
}V W
public 
List 
< 
ItemPerdido 
>  
BuscarPorIdUsuario! 3
(3 4
long4 8
id9 ;
); <
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
	UsuarioId2 ;
==< >
id? A
)A B
.B C
ToListC I
(I J
)J K
;K L
} 	
public 
ItemPerdido 
BuscarComTags (
(( )
long) -
id. 0
)0 1
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
Id2 4
==5 7
id8 :
,: ;
result< B
=>C E
resultF L
.L M
IncludeM T
(T U
perdidoU \
=>] _
perdido` g
.g h
Tagsh l
)l m
)m n
. 
SingleOrDefault  
(  !
)! "
;" #
} 	
public 
ItemPerdido !
BuscarComEagerLoading 0
(0 1
long1 5
id6 8
)8 9
{ 	
return 
base 
. 
Entity 
( 
)  
. 
Include 
( 
item 
=>  
item! %
.% &
Regiao& ,
), -
. 
Include 
( 
item 
=>  
item! %
.% &
Tags& *
)* +
. 
Single 
( 
item 
=> 
item  $
.$ %
Id% '
==( *
id+ -
)- .
;. /
} 	
}   
}!! ®

;D:\git\Achei\backend\Persistencia\Services\RegiaoService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
RegiaoService 
:  
CrudService! ,
<, -
Regiao- 3
>3 4
,4 5
IRegiaoService6 D
{		 
public

 
RegiaoService

 
(

  
ApplicationDbContext

 1
	dbContext

2 ;
)

; <
:

= >
base

? C
(

C D
	dbContext

D M
)

M N
{

O P
}

Q R
public 
Regiao 
BuscarPorItemId %
(% &
long& *
id+ -
)- .
{ 	
return 
base 
. 
Entity 
( 
)  
.  !
Where! &
(& '
regiao' -
=>. 0
regiao1 7
.7 8
Item8 <
.< =
Any= @
(@ A
itemA E
=>F H
itemI M
.M N
IdN P
==Q S
idT V
)V W
)W X
.X Y
SingleY _
(_ `
)` a
;a b
} 	
} 
} ÷
8D:\git\Achei\backend\Persistencia\Services\TagService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public		 

class		 

TagService		 
:		 
CrudService		 )
<		) *
Tag		* -
>		- .
,		. /
ITagService		0 ;
{

 
public 

TagService 
(  
ApplicationDbContext .
	dbContext/ 8
)8 9
:: ;
base< @
(@ A
	dbContextA J
)J K
{L M
}N O
public 
List 
< 
Tag 
> 
BuscarPorItemId (
(( )
long) -
id. 0
)0 1
{ 	
return 
base 
. 
Buscar 
( 
tag "
=># %
tag& )
.) *
ItemId* 0
==1 3
id4 6
)6 7
.7 8
ToList8 >
(> ?
)? @
;@ A
} 	
} 
} 
<D:\git\Achei\backend\Persistencia\Services\UsuarioService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
UsuarioService 
:  !
CrudService" -
<- .
Usuario. 5
>5 6
,6 7
IUsuarioService8 G
{ 
public		 
UsuarioService		 
(		  
ApplicationDbContext		 2
	dbContext		3 <
)		< =
:		> ?
base		@ D
(		D E
	dbContext		E N
)		N O
{		P Q
}		R S
}

 
} 