≈
5D:\git\Achei\backend\Persistencia\ConnectionString.cs
	namespace 	
Persistencia
 
{ 
public 

static 
class 
ConnectionString (
{ 
public 
static 
string 
Server #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
static 
string 
Database %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
static 
string 
UserId #
{$ %
get& )
;) *
set+ .
;. /
}0 1
public 
static 
string 
Password %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
static 
void 
SetConnection (
(( )
string) /
server0 6
,6 7
string8 >
database? G
,G H
stringI O
userIdP V
,V W
stringX ^
password_ g
)g h
{ 	
ConnectionString 
. 
Server #
=$ %
server& ,
;, -
ConnectionString 
. 
Database %
=& '
database( 0
;0 1
ConnectionString 
. 
UserId #
=$ %
userId& ,
;, -
ConnectionString 
. 
Password %
=& '
password( 0
;0 1
} 	
public 
static 
string 
GetConnection *
(* +
)+ ,
{ 	
return 
$str 
+ 
Server %
+& '
$str( 4
+5 6
Database7 ?
+ 
$str 
+ 
UserId  &
+' (
$str) 5
+6 7
Password8 @
+A B
$strC F
;F G
} 	
} 
} Ê
ND:\git\Achei\backend\Persistencia\Contexts\Application\ApplicationDbContext.cs
	namespace 	
Persistencia
 
. 
Contexts 
.  
Application  +
{ 
public 

partial 
class  
ApplicationDbContext -
:. /
	DbContext0 9
{ 
public		  
ApplicationDbContext		 #
(		# $
DbContextOptions		$ 4
<		4 5 
ApplicationDbContext		5 I
>		I J
options		K R
)		R S
:		T U
base		V Z
(		Z [
options		[ b
)		b c
{		d e
}		f g
	protected 
override 
void 
OnConfiguring  -
(- .#
DbContextOptionsBuilder. E
optionsBuilderF T
)T U
{ 	
optionsBuilder 
. &
EnableSensitiveDataLogging 5
(5 6
)6 7
;7 8
optionsBuilder 
. 
UseSqlServer 
( 
ConnectionString .
.. /
GetConnection/ <
(< =
)= >
,> ?
b@ A
=>B D
bE F
.F G
MigrationsAssemblyG Y
(Y Z
$strZ f
)f g
)g h
.  
EnableDetailedErrors %
(% &
)& '
;' (
} 	
	protected 
override 
void 
OnModelCreating  /
(/ 0
ModelBuilder0 <
modelBuilder= I
)I J
{ 	
modelBuilder 
. 
HasAnnotation &
(& '
$str' 7
,7 8
$str9 @
)@ A
;A B
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
UsuarioConfig0 =
(= >
)> ?
)? @
;@ A
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /

ItemConfig0 :
(: ;
); <
)< =
;= >
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
	TagConfig0 9
(9 :
): ;
); <
;< =
modelBuilder 
. 
ApplyConfiguration +
(+ ,
new, /
RegiaoConfig0 <
(< =
)= >
)> ?
;? @
modelBuilder 
. 
Entity 
<  
ItemPerdido  +
>+ ,
(, -
)- .
. 
Property 
( 
e 
=> 
e  
.  !
	UsuarioId! *
)* +
. 
HasColumnName 
( 
$str *
)* +
;+ ,
modelBuilder   
.   
Entity   
<    

ItemAchado    *
>  * +
(  + ,
)  , -
.!! 
Property!! 
(!! 
e!! 
=>!! 
e!!  
.!!  !
	UsuarioId!!! *
)!!* +
."" 
HasColumnName"" 
("" 
$str"" *
)""* +
;""+ ,
}## 	
}$$ 
}%% Ÿ
WD:\git\Achei\backend\Persistencia\Contexts\Application\ApplicationDbContext.DataSets.cs
	namespace 	
Persistencia
 
. 
Contexts 
.  
Application  +
{ 
public 

partial 
class  
ApplicationDbContext -
{ 
public		 
virtual		 
DbSet		 
<		 
Usuario		 $
>		$ %
Usuario		& -
{		. /
get		0 3
;		3 4
set		5 8
;		8 9
}		: ;
public

 
virtual

 
DbSet

 
<

 

ItemAchado

 '
>

' (

ItemAchado

) 3
{

4 5
get

6 9
;

9 :
set

; >
;

> ?
}

@ A
public 
virtual 
DbSet 
< 
ItemPerdido (
>( )
ItemPerdido* 5
{6 7
get8 ;
;; <
set= @
;@ A
}B C
public 
virtual 
DbSet 
< 
Tag  
>  !
Tag" %
{& '
get( +
;+ ,
set- 0
;0 1
}2 3
public 
virtual 
DbSet 
< 
Regiao #
># $
Regiao% +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
} 
} ª
DD:\git\Achei\backend\Persistencia\Interfaces\IAutenticacaoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface  
IAutenticacaoService )
:* +
ICrudService, 8
<8 9
Usuario9 @
>@ A
{ 
Usuario 
AutenticarUsuario !
(! "
string" (
email) .
,. /
string0 6
senha7 <
)< =
;= >
} 
}		 â
<D:\git\Achei\backend\Persistencia\Interfaces\ICrudService.cs
	namespace

 	
Persistencia


 
.

 

Interfaces

 !
{ 
public 

	interface 
ICrudService !
<! "
T" #
># $
where% *
T+ ,
:- .
class/ 4
,4 5
IEntity6 =
,= >
new? B
(B C
)C D
{ 
void 
	Atualizar 
( 
T 
entidade !
)! "
;" #
void 
	Atualizar 
( 
List 
< 
T 
> 
	entidades (
)( )
;) *
Task## 
AtualizarAsync## 
(## 
T## 
entidade## &
)##& '
;##' (
Task)) 
AtualizarAsync)) 
()) 
List))  
<))  !
T))! "
>))" #
	entidades))$ -
)))- .
;)). /
List++ 
<++ 
T++ 
>++ 
Buscar++ 
(++ 
)++ 
;++ 
T11 	
Buscar11
 
(11 
long11 
id11 
)11 
;11 

IQueryableFF 
<FF 
TFF 
>FF 
BuscarFF 
(FF 

ExpressionFF '
<FF' (
FuncFF( ,
<FF, -
TFF- .
,FF. /
boolFF0 4
>FF4 5
>FF5 6
	predicateFF7 @
,FF@ A
FuncFFB F
<FFF G

IQueryableFFG Q
<FFQ R
TFFR S
>FFS T
,FFT U 
IIncludableQueryableFFV j
<FFj k
TFFk l
,FFl m
objectFFn t
>FFt u
>FFu v
includeFFw ~
=	FF Ä
null
FFÅ Ö
)
FFÖ Ü
;
FFÜ á
TaskHH 
<HH 
ListHH 
<HH 
THH 
>HH 
>HH 
BuscarAsyncHH !
(HH! "
)HH" #
;HH# $
TaskJJ 
<JJ 
TJJ 
>JJ 
BuscarAsyncJJ 
(JJ 
longJJ  
idJJ! #
)JJ# $
;JJ$ %
voidQQ 
DeletarQQ 
(QQ 
TQQ 
entidadeQQ 
)QQ  
;QQ  !
voidXX 
DeletarXX 
(XX 
longXX 
idXX 
)XX 
;XX 
Task__ 
DeletarAsync__ 
(__ 
T__ 
entidade__ $
)__$ %
;__% &
Taskgg 
DeletarAsyncgg 
(gg 
longgg 
idgg !
)gg! "
;gg" #
Tnn 	
Inserirnn
 
(nn 
Tnn 
entidadenn 
)nn 
;nn 
Taskuu 
<uu 
Tuu 
>uu 
InserirAsyncuu 
(uu 
Tuu 
entidadeuu '
)uu' (
;uu( )
DbSet{{ 
<{{ 
T{{ 
>{{ 
Entity{{ 
({{ 
){{ 
;{{ 
}|| 
}}} ≥
BD:\git\Achei\backend\Persistencia\Interfaces\IITemAchadoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IItemAchadoService '
:( )
ICrudService* 6
<6 7

ItemAchado7 A
>A B
{ 
List 
< 

ItemAchado 
> 
BuscarPorIdUsuario +
(+ ,
long, 0
id1 3
)3 4
;4 5
} 
} ∫
CD:\git\Achei\backend\Persistencia\Interfaces\IItemPerdidoService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IItemPerdidoService (
:) *
ICrudService+ 7
<7 8
ItemPerdido8 C
>C D
{ 
List 
< 
ItemPerdido 
> 
BuscarPorIdUsuario ,
(, -
long- 1
id2 4
)4 5
;5 6
ItemPerdido 
BuscarComTags !
(! "
long" &
id' )
)) *
;* +
} 
} Û
?D:\git\Achei\backend\Persistencia\Interfaces\IUsuarioService.cs
	namespace 	
Persistencia
 
. 

Interfaces !
{ 
public 

	interface 
IUsuarioService $
:% &
ICrudService' 3
<3 4
Usuario4 ;
>; <
{ 
} 
}		 ø	
AD:\git\Achei\backend\Persistencia\Services\AutenticacaoService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
AutenticacaoService $
:% &
CrudService' 2
<2 3
Usuario3 :
>: ;
,; < 
IAutenticacaoService= Q
{		 
public

 
AutenticacaoService

 "
(

" # 
ApplicationDbContext

# 7
context

8 ?
)

? @
:

A B
base

C G
(

G H
context

H O
)

O P
{

Q R
}

S T
public 
Usuario 
AutenticarUsuario (
(( )
string) /
email0 5
,5 6
string7 =
senha> C
)C D
{ 	
return 
base 
. 
Buscar 
( 
usuario &
=>' )
usuario* 1
.1 2
Email2 7
==8 :
email; @
)@ A
.A B
SingleOrDefaultB Q
(Q R
)R S
;S T
} 	
} 
} ûl
9D:\git\Achei\backend\Persistencia\Services\CrudService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
CrudService 
< 
T 
> 
:  !
ICrudService" .
<. /
T/ 0
>0 1
where2 7
T8 9
:: ;
class< A
,A B
IEntityC J
,J K
newL O
(O P
)P Q
{ 
private 
readonly 
	DbContext "
	dbService# ,
;, -
public 
CrudService 
( 
	DbContext $
	dbService% .
). /
{ 	
this 
. 
	dbService 
= 
	dbService &
;& '
} 	
public 
void 
	Atualizar 
( 
T 
entidade  (
)( )
{ 	
this 
. 
	dbService 
. 
Update !
(! "
entidade" *
)* +
;+ ,
this 
. 
	dbService 
. 
SaveChanges &
(& '
)' (
;( )
} 	
public 
void 
	Atualizar 
( 
List "
<" #
T# $
>$ %
	entidades& /
)/ 0
{ 	
this 
. 
	dbService 
. 
Update !
(! "
	entidades" +
)+ ,
;, -
this   
.   
	dbService   
.   
SaveChanges   &
(  & '
)  ' (
;  ( )
}!! 	
public## 
List## 
<## 
T## 
>## 
Buscar## 
(## 
)## 
{$$ 	
return%% 
this%% 
.%% 
	dbService%% !
.%%! "
Set%%" %
<%%% &
T%%& '
>%%' (
(%%( )
)%%) *
.%%* +
ToList%%+ 1
(%%1 2
)%%2 3
;%%3 4
}&& 	
public(( 

IQueryable(( 
<(( 
T(( 
>(( 
Buscar(( #
(((# $

Expression(($ .
<((. /
Func((/ 3
<((3 4
T((4 5
,((5 6
bool((7 ;
>((; <
>((< =
	predicate((> G
,((G H
Func((I M
<((M N

IQueryable((N X
<((X Y
T((Y Z
>((Z [
,(([ \ 
IIncludableQueryable))  
<))  !
T))! "
,))" #
object))$ *
>))* +
>))+ ,
include))- 4
=))5 6
null))7 ;
))); <
{** 	

IQueryable++ 
<++ 
T++ 
>++ 
result++  
=++! "
this++# '
.++' (
	dbService++( 1
.++1 2
Set++2 5
<++5 6
T++6 7
>++7 8
(++8 9
)++9 :
.++: ;
Where++; @
(++@ A
	predicate++A J
)++J K
;++K L
if-- 
(-- 
include-- 
!=-- 
null-- 
)--  
result.. 
=.. 
include..  
(..  !
result..! '
)..' (
;..( )
return00 
result00 
.00 
AsQueryable00 %
(00% &
)00& '
;00' (
}11 	
public33 
T33 
Buscar33 
(33 
long33 
id33 
)33  
{44 	
return55 
this55 
.55 
	dbService55 !
.55! "
Set55" %
<55% &
T55& '
>55' (
(55( )
)55) *
.55* +
Find55+ /
(55/ 0
id550 2
)552 3
;553 4
}66 	
public88 
void88 
Deletar88 
(88 
T88 
entidade88 &
)88& '
{99 	
EntityEntry:: 
<:: 
T:: 
>:: 
retorno:: "
=::# $
this::% )
.::) *
	dbService::* 3
.::3 4
Set::4 7
<::7 8
T::8 9
>::9 :
(::: ;
)::; <
.::< =
Remove::= C
(::C D
entidade::D L
)::L M
;::M N
	dbService;; 
.;; 
SaveChanges;; !
(;;! "
);;" #
;;;# $
}<< 	
public>> 
void>> 
Deletar>> 
(>> 
long>>  
id>>! #
)>># $
{?? 	
IEntity@@ 
obj@@ 
=@@ 
new@@ 
T@@ 
(@@  
)@@  !
{@@" #
Id@@$ &
=@@' (
id@@) +
}@@, -
;@@- .
thisBB 
.BB 
	dbServiceBB 
.BB 
AttachBB !
(BB! "
objBB" %
)BB% &
;BB& '
thisCC 
.CC 
	dbServiceCC 
.CC 
RemoveCC !
(CC! "
objCC" %
)CC% &
;CC& '
thisDD 
.DD 
	dbServiceDD 
.DD 
SaveChangesDD &
(DD& '
)DD' (
;DD( )
}EE 	
publicGG 
TGG 
InserirGG 
(GG 
TGG 
entidadeGG #
)GG# $
{HH 	
boolII 
existsII 
=II 
thisII 
.II 
	dbServiceII (
.II( )
SetII) ,
<II, -
TII- .
>II. /
(II/ 0
)II0 1
.II1 2
AnyII2 5
(II5 6
entII6 9
=>II: <
entII= @
.II@ A
IdIIA C
==IID F
entidadeIIG O
.IIO P
IdIIP R
)IIR S
;IIS T
ifKK 
(KK 
!KK 
existsKK 
)KK 
{LL 
thisMM 
.MM 
	dbServiceMM 
.MM 
AddMM "
(MM" #
entidadeMM# +
)MM+ ,
;MM, -
thisNN 
.NN 
	dbServiceNN 
.NN 
SaveChangesNN *
(NN* +
)NN+ ,
;NN, -
returnOO 
entidadeOO 
;OO  
}PP 
elseQQ 
{RR 
throwSS 
newSS 
	ExceptionSS #
(SS# $
$strSS$ V
)SSV W
;SSW X
}TT 
}UU 	
publicWW 
asyncWW 
TaskWW 
AtualizarAsyncWW (
(WW( )
TWW) *
entidadeWW+ 3
)WW3 4
{XX 	
ifYY 
(YY 
thisYY 
.YY 
	dbServiceYY 
.YY 
SetYY "
<YY" #
TYY# $
>YY$ %
(YY% &
)YY& '
.YY' (
AnyYY( +
(YY+ ,
entYY, /
=>YY0 2
entYY3 6
.YY6 7
IdYY7 9
==YY: <
entidadeYY= E
.YYE F
IdYYF H
)YYH I
)YYI J
{ZZ 
this[[ 
.[[ 
	dbService[[ 
.[[ 
Update[[ %
([[% &
entidade[[& .
)[[. /
;[[/ 0
await\\ 
this\\ 
.\\ 
	dbService\\ $
.\\$ %
SaveChangesAsync\\% 5
(\\5 6
)\\6 7
;\\7 8
}]] 
else^^ 
{__ 
throw`` 
new`` 
	Exception`` #
(``# $
$str``$ _
)``_ `
;``` a
}aa 
}cc 	
publicee 
asyncee 
Taskee 
AtualizarAsyncee (
(ee( )
Listee) -
<ee- .
Tee. /
>ee/ 0
	entidadesee1 :
)ee: ;
{ff 	
thisgg 
.gg 
	dbServicegg 
.gg 
Updategg !
(gg! "
	entidadesgg" +
)gg+ ,
;gg, -
awaithh 
thishh 
.hh 
	dbServicehh  
.hh  !
SaveChangesAsynchh! 1
(hh1 2
)hh2 3
;hh3 4
}ii 	
publickk 
asynckk 
Taskkk 
<kk 
Listkk 
<kk 
Tkk  
>kk  !
>kk! "
BuscarAsynckk# .
(kk. /
)kk/ 0
{ll 	
returnmm 
awaitmm 
thismm 
.mm 
	dbServicemm '
.mm' (
Setmm( +
<mm+ ,
Tmm, -
>mm- .
(mm. /
)mm/ 0
.mm0 1
ToListAsyncmm1 <
(mm< =
)mm= >
;mm> ?
}nn 	
publicpp 
asyncpp 
Taskpp 
<pp 
Tpp 
>pp 
BuscarAsyncpp (
(pp( )
longpp) -
idpp. 0
)pp0 1
{qq 	
returnrr 
awaitrr 
thisrr 
.rr 
	dbServicerr '
.rr' (
	FindAsyncrr( 1
<rr1 2
Trr2 3
>rr3 4
(rr4 5
idrr5 7
)rr7 8
;rr8 9
}ss 	
publicuu 
asyncuu 
Taskuu 
DeletarAsyncuu &
(uu& '
Tuu' (
entidadeuu) 1
)uu1 2
{vv 	
EntityEntryww 
<ww 
Tww 
>ww 
retornoww "
=ww# $
thisww% )
.ww) *
	dbServiceww* 3
.ww3 4
Removeww4 :
(ww: ;
entidadeww; C
)wwC D
;wwD E
awaitxx 
	dbServicexx 
.xx 
SaveChangesAsyncxx ,
(xx, -
)xx- .
;xx. /
}yy 	
public{{ 
async{{ 
Task{{ 
DeletarAsync{{ &
({{& '
long{{' +
id{{, .
){{. /
{|| 	
IEntity}} 
obj}} 
=}} 
new}} 
T}} 
(}}  
)}}  !
{}}" #
Id}}$ &
=}}' (
id}}) +
}}}, -
;}}- .
this 
. 
	dbService 
. 
Attach !
(! "
obj" %
)% &
;& '
this
ÄÄ 
.
ÄÄ 
	dbService
ÄÄ 
.
ÄÄ 
Remove
ÄÄ !
(
ÄÄ! "
obj
ÄÄ" %
)
ÄÄ% &
;
ÄÄ& '
await
ÅÅ 
this
ÅÅ 
.
ÅÅ 
	dbService
ÅÅ  
.
ÅÅ  !
SaveChangesAsync
ÅÅ! 1
(
ÅÅ1 2
)
ÅÅ2 3
;
ÅÅ3 4
}
ÇÇ 	
public
ÑÑ 
async
ÑÑ 
Task
ÑÑ 
<
ÑÑ 
T
ÑÑ 
>
ÑÑ 
InserirAsync
ÑÑ )
(
ÑÑ) *
T
ÑÑ* +
entidade
ÑÑ, 4
)
ÑÑ4 5
{
ÖÖ 	
try
ÜÜ 
{
áá 
bool
àà 
exists
àà 
=
àà 
this
àà "
.
àà" #
	dbService
àà# ,
.
àà, -
Set
àà- 0
<
àà0 1
T
àà1 2
>
àà2 3
(
àà3 4
)
àà4 5
.
àà5 6
Any
àà6 9
(
àà9 :
ent
àà: =
=>
àà> @
ent
ààA D
.
ààD E
Id
ààE G
==
ààH J
entidade
ààK S
.
ààS T
Id
ààT V
)
ààV W
;
ààW X
if
ää 
(
ää 
!
ää 
exists
ää 
)
ää 
{
ãã 
await
åå 
this
åå 
.
åå 
	dbService
åå (
.
åå( )
AddAsync
åå) 1
(
åå1 2
entidade
åå2 :
)
åå: ;
;
åå; <
await
çç 
this
çç 
.
çç 
	dbService
çç (
.
çç( )
SaveChangesAsync
çç) 9
(
çç9 :
)
çç: ;
;
çç; <
return
éé 
entidade
éé #
;
éé# $
}
èè 
else
êê 
{
ëë 
System
íí 
.
íí 
Diagnostics
íí &
.
íí& '
Debug
íí' ,
.
íí, -
	WriteLine
íí- 6
(
íí6 7
entidade
íí7 ?
.
íí? @
GetType
íí@ G
(
ííG H
)
ííH I
+
ííJ K
$str
ííL T
+
ííU V
entidade
ííW _
.
íí_ `
Id
íí` b
+
ííc d
$str
ííe x
)
ííx y
;
ííy z
throw
ìì 
new
ìì 
	Exception
ìì '
(
ìì' (
$str
ìì( D
)
ììD E
;
ììE F
}
îî 
}
ïï 
catch
ññ 
(
ññ 
	Exception
ññ 
e
ññ 
)
ññ 
{
óó 
System
òò 
.
òò 
Diagnostics
òò "
.
òò" #
Debug
òò# (
.
òò( )
	WriteLine
òò) 2
(
òò2 3
e
òò3 4
.
òò4 5
Message
òò5 <
)
òò< =
;
òò= >
throw
ôô 
new
ôô 
	Exception
ôô #
(
ôô# $
$str
ôô$ T
)
ôôT U
;
ôôU V
}
öö 
}
õõ 	
public
ùù 
DbSet
ùù 
<
ùù 
T
ùù 
>
ùù 
Entity
ùù 
(
ùù 
)
ùù  
{
ûû 	
return
üü 
this
üü 
.
üü 
	dbService
üü !
.
üü! "
Set
üü" %
<
üü% &
T
üü& '
>
üü' (
(
üü( )
)
üü) *
;
üü* +
}
†† 	
}
°° 
}¢¢ Ø	
?D:\git\Achei\backend\Persistencia\Services\ItemAchadoService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public		 

class		 
ItemAchadoService		 "
:		# $
CrudService		% 0
<		0 1

ItemAchado		1 ;
>		; <
,		< =
IItemAchadoService		> P
{

 
public 
ItemAchadoService  
(  ! 
ApplicationDbContext! 5
	dbContext6 ?
)? @
:A B
baseC G
(G H
	dbContextH Q
)Q R
{S T
}U V
public 
List 
< 

ItemAchado 
> 
BuscarPorIdUsuario  2
(2 3
long3 7
id8 :
): ;
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
	UsuarioId2 ;
==< >
id? A
)A B
.B C
ToListC I
(I J
)J K
;K L
} 	
} 
} ¯
@D:\git\Achei\backend\Persistencia\Services\ItemPerdidoService.cs
	namespace 	
Persistencia
 
. 
Services 
{		 
public

 

class

 
ItemPerdidoService

 #
:

$ %
CrudService

& 1
<

1 2
ItemPerdido

2 =
>

= >
,

> ?
IItemPerdidoService

@ S
{ 
public 
ItemPerdidoService !
(! " 
ApplicationDbContext" 6
	dbContext7 @
)@ A
:B C
baseD H
(H I
	dbContextI R
)R S
{T U
}V W
public 
List 
< 
ItemPerdido 
>  
BuscarPorIdUsuario! 3
(3 4
long4 8
id9 ;
); <
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
	UsuarioId2 ;
==< >
id? A
)A B
.B C
ToListC I
(I J
)J K
;K L
} 	
public 
ItemPerdido 
BuscarComTags (
(( )
long) -
id. 0
)0 1
{ 	
return 
base 
. 
Buscar 
( 
perdido &
=>' )
perdido* 1
.1 2
Id2 4
==5 7
id8 :
,: ;
result< B
=>C E
resultF L
.L M
IncludeM T
(T U
perdidoU \
=>] _
perdido` g
.g h
Tagsh l
)l m
)m n
. 
SingleOrDefault  
(  !
)! "
;" #
} 	
} 
} è
<D:\git\Achei\backend\Persistencia\Services\UsuarioService.cs
	namespace 	
Persistencia
 
. 
Services 
{ 
public 

class 
UsuarioService 
:  !
CrudService" -
<- .
Usuario. 5
>5 6
,6 7
IUsuarioService8 G
{ 
public		 
UsuarioService		 
(		  
ApplicationDbContext		 2
	dbContext		3 <
)		< =
:		> ?
base		@ D
(		D E
	dbContext		E N
)		N O
{		P Q
}		R S
}

 
} 